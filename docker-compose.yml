# Docker Compose file for Cliente API
# Use: docker compose up --build -d

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cliente-api-postgres
    environment:
      POSTGRES_DB: cliente_api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - cliente-api-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d cliente_api" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application
  cliente-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cliente-api-app
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/cliente_api
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres123
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cliente-api-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  cliente-api-network:
    driver: bridge
